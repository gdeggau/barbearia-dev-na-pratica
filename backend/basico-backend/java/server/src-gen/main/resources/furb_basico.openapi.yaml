openapi: '3.0.2'

info:
  version: develop-SNAPSHOT
  title: basico
  x-senior-domain: furb
  x-senior-domain-path: furb
  x-senior-service-path: basico
  contact:
    name: Senior X Platform
    url: http://dev.senior.com.br
    email: seniorx-dev@senior.com.br
servers:
  - url: platform.senior.com.br/t/senior.com.br/bridge/1.0/

paths:
  /rest/furb/basico/queries/getMetadata:
    post:
      description: "Default 'getMetadata' query. Every service must handle this command and return metadata in the format requested."
      tags:
        - Queries
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadataFormat:
                  type: string
                  description: ""
      parameters:
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - metadata
                properties:
                  metadata:
                    type: string
                    description: ""
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
    get:
      description: "Default 'getMetadata' query. Every service must handle this command and return metadata in the format requested."
      tags:
        - Queries
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      parameters:
        - in : query
          name : metadataFormat
          description: ""
          schema:
            type: string
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - metadata
                properties:
                  metadata:
                    type: string
                    description: ""
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  
  /rest/furb/basico/queries/getDependencies:
    post:
      description: "Returns a list with all dependencies from this service, along with their respective versions"
      tags:
        - Queries
      x-senior-visibility: PUBLIC
      security :
        - bearerAuth: []
      parameters:
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - dependencies
                properties:
                  dependencies:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/dependency'
                      minimum: 1
                    description: "List with this service dependencies"
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
    get:
      description: "Returns a list with all dependencies from this service, along with their respective versions"
      tags:
        - Queries
      x-senior-visibility: PUBLIC
      security :
        - bearerAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - dependencies
                properties:
                  dependencies:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/dependency'
                      minimum: 1
                    description: "List with this service dependencies"
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  
  /rest/furb/basico/queries/helloWorld:
    post:
      description: ""
      tags:
        - Queries
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - who
              properties:
                who:
                  type: string
                  description: ""
      parameters:
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - helloWorldMessage
                properties:
                  helloWorldMessage:
                    type: string
                    description: ""
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
    get:
      description: ""
      tags:
        - Queries
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      parameters:
        - in : query
          name : who
          description: ""
          required: true
          schema:
            type: string
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - helloWorldMessage
                properties:
                  helloWorldMessage:
                    type: string
                    description: ""
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  /rest/furb/basico/actions/gravarFoto:
    post:
      description: "Grava a foto que foi upada"
      tags:
        - Actions
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - version
              properties:
                id:
                  type: string
                  description: "identificador da foto"
                version:
                  type: string
                  description: "versão que será gravada, obtida no obterUrlFoto"
      parameters:
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                properties:
                  result:
                    type: string
                    allOf:
                    - $ref: '#/components/schemas/fotoOperationResult'
                    description: "resultado da operação"
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  
  /rest/furb/basico/actions/obterUrlDownloadFoto:
    post:
      description: "Obtém a URL para download da foto"
      tags:
        - Actions
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: "Id da foto"
      parameters:
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
                    description: "url para download da foto"
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  
  /rest/furb/basico/actions/obterUrlUploadFoto:
    post:
      description: "Obtém a URL para upload da foto"
      tags:
        - Actions
      x-senior-visibility: PRIVATE
      security :
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: "Id da foto, opcional, caso não tenha gera um e retorna"
      parameters:
        - in: header
          name: Accept
          description: 'Content types and endpoint version for the request. Example: application/json;seniorx.version=2'
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - version
                  - url
                properties:
                  id:
                    type: string
                    description: "identificador da foto"
                  version:
                    type: string
                    description: "versão do arquivo para commit"
                  url:
                    type: string
                    description: "url para upload da foto"
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'

components:
  securitySchemes:
    bearerAuth:
      name: Authorization 
      type: apiKey
      in: header
  schemas:
    fotoOperationResult:
      description: "Enumeração que define o resultado da gravação da foto"
      type: string
      enum:
        - SUCCESS
        - ERROR
      
    
    userNotificationKind:
      description: "User notification kind."
      type: string
      enum:
        - Operational
        - Management
        - News
      
    
    userNotificationPriority:
      description: "User notification priority."
      type: string
      enum:
        - Error
        - Alert
        - None
      
    
    eventEmailFormat:
      description: "Format of the email"
      type: string
      enum:
        - HTML
        - PLAIN_TEXT
      
    notifyUserEventPayload:
      description: "Represents a regular user event notification payload"
      discriminator: 
        propertyName: _discriminator
      type: object
      required:
        - notificationKind
        - notificationPriority
        - notificationSubject
        - notificationContent
        - sourceDomain
        - sourceService
        - destinationUser
        - _discriminator
      properties:
        notificationClass:
          type: string
          description: "Class of notification"
        notificationOrigin:
          type: string
          description: "Origin of notification. Free text. Optional."
        notificationKind:
          type: string
          allOf:
          - $ref: '#/components/schemas/userNotificationKind'
          description: "Notification kind."
        notificationPriority:
          type: string
          allOf:
          - $ref: '#/components/schemas/userNotificationPriority'
          description: "Notification priority."
        notificationSubject:
          type: string
          description: "Notification subject."
        notificationContent:
          type: string
          description: "Notification content."
        sourceDomain:
          type: string
          description: "Domain that generates the notification."
        sourceService:
          type: string
          description: "Service that generates the notification."
        destinationUser:
          type: string
          description: "Username of the destination user."
        link:
          type: string
          description: "Notification link"
        _discriminator:
          type: string
          description: ""
    
    emailNotifyUserEventPayload:
      description: "Represents an email notification payload"
      allOf:
      - $ref: '#/components/schemas/notifyUserEventPayload'
      - 
        type: object
        required:
          - from
        properties:
          from:
            type: string
            description: "Email sender address"
          sendTo:
            type: array
            items:
              type: string
            description: "Additional recipients to send the email to"
          format:
            type: string
            allOf:
            - $ref: '#/components/schemas/eventEmailFormat'
            description: "Email format"
    
    pushNotifyUserEventPayload:
      description: "Represents a push notification payload"
      allOf:
      - $ref: '#/components/schemas/notifyUserEventPayload'
      - 
        type: object
        required:
          - applicationId
        properties:
          applicationId:
            type: string
            description: "Apple/Google application id"
    
    blobReference:
      description: "Default blob reference type. Every service defines its own."
      type: object
      required:
        - targetObjectId
      properties:
        domainName:
          type: string
          description: "The domain the blob belongs to."
        serviceName:
          type: string
          description: "The service the blob belongs to."
        targetObjectId:
          type: string
          description: "The basic id of the blob."
        targetCopyId:
          type: string
          description: "The id of the blob copy."
    
    basicErrorPayload:
      description: "Default error payload type. Every service defines its own."
      type: object
      properties:
        message:
          type: string
          description: "The user-facing error message, if any."
        errorCode:
          type: string
          description: "The program-accessible (and service-specific) error code."
    
    dependency:
      description: "Represents a service dependency"
      type: object
      required:
        - domain
        - service
        - version
      properties:
        domain:
          type: string
          description: "Domain of the dependency service"
        service:
          type: string
          description: "Name of the dependency service"
        version:
          type: string
          description: "Version of the dependency service"
    genericError:
      properties:
        message:
          type: string
          description: Messaging describing the error.
        reason:
          type: string
          description: A symbolic code identifying the category of the reason of the error.
          enum:
            - BAD_REQUEST
            - UNAUTHORIZED
            - PAYMENT_REQUIRED
            - FORBIDDEN
            - OBJECT_NOT_FOUND
            - REQUEST_TIMEOUT
            - GONE
            - UNPROCESSABLE
            - INTERNAL_ERROR
            - NOT_IMPLEMENTED
            - SERVICE_UNAVAILABLE
            - INSUFFICIENT_STORAGE
